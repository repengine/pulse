# operator/symbolic_revision_report.py

"""
Symbolic Revision Report Generator

Generates a markdown summary of symbolic tuning results:
- License changes
- Alignment score improvement
- Revision plans applied

Author: Pulse AI Engine
Version: v1.0.0
"""

import json
from collections import Counter
from typing import List, Dict, Any


def load_tuning_results(path: str) -> List[Dict[str, Any]]:
    """Load logged tuning result entries."""
    try:
        with open(path, "r") as f:
            return [json.loads(line.strip()) for line in f if line.strip()]
    except Exception as e:
        print(f"❌ Failed to load tuning results: {e}")
        return []


def generate_revision_report(
    results: List[Dict[str, Any]], output_md: str = "symbolic_revision_report.md"
):
    """
    Create and save markdown report.

    Args:
        results (List[Dict]): Tuning result logs
        output_md (str): Output markdown path
    """
    try:
        improved = [r for r in results if r["alignment_delta"] > 0]
        accepted = [r for r in results if r["revised_license"] == "✅ Approved"]
        still_rejected = [r for r in results if r["revised_license"] != "✅ Approved"]

        plans = Counter()
        for r in results:
            for k in r.get("symbolic_revision_plan", {}).keys():
                plans[k] += 1

        with open(output_md, "w") as f:
            f.write("# 🧠 Symbolic Revision Report\n")
            f.write(f"Total Revised Forecasts: {len(results)}\n\n")

            f.write("## 📈 Improvement Summary\n")
            f.write(f"- Improved Alignment: {len(improved)}\n")
            f.write(f"- Approved After Revision: {len(accepted)}\n")
            f.write(f"- Still Rejected: {len(still_rejected)}\n\n")

            f.write("## 🔁 Most Common Symbolic Tuning Operations\n")
            for k, v in plans.most_common(10):
                f.write(f"- {k}: {v}\n")

            f.write("\n## 🔍 Sample Delta Table\n")
            f.write("| Trace ID | Alignment Δ | License Change |\n")
            f.write("|----------|--------------|----------------|\n")
            for r in results[:10]:
                f.write(
                    f"| {
                        r['original_trace_id']} | {
                        r['alignment_delta']} | {
                        r['original_license']} → {
                        r['revised_license']} |\n")

            f.write("\n---\nGenerated by Pulse Tuning Engine\n")
        print(f"✅ Symbolic tuning report saved to {output_md}")
    except Exception as e:
        print(f"❌ Report generation failed: {e}")


def _test_symbolic_revision_report():
    dummy = [
        {
            "original_trace_id": "fc1",
            "alignment_delta": 0.2,
            "original_license": "❌ Rejected",
            "revised_license": "✅ Approved",
            "symbolic_revision_plan": {"arc_label": "Stabilization"},
        },
        {
            "original_trace_id": "fc2",
            "alignment_delta": -0.1,
            "original_license": "❌ Rejected",
            "revised_license": "❌ Rejected",
            "symbolic_revision_plan": {"overlay_rage": "reduce"},
        },
    ]
    generate_revision_report(dummy, output_md="test_symbolic_revision_report.md")
    print("✅ Symbolic revision report test passed.")


if __name__ == "__main__":
    _test_symbolic_revision_report()
